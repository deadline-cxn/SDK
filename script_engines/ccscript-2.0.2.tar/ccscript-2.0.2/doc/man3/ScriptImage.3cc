.TH "ScriptImage" 3 "12 Apr 2002" "ccScript" \" -*- nroff -*-
.ad l
.nh
.SH NAME
ScriptImage \- A derivable class to hold compiled script images for active processes. Script compiler image set. 
.SH SYNOPSIS
.br
.PP
\fC#include <script.h>\fP
.PP
Inherits Script.
.PP
.SS "Public Methods"

.in +1c
.ti -1c
.RI "virtual Name * \fBgetScript\fP (const char *name)"
.br
.RI "\fIFetch named script.\fP"
.ti -1c
.RI "virtual Name * \fBdupScript\fP (const char *name, const char *target)"
.br
.RI "\fIDuplicate script if needed.\fP"
.ti -1c
.RI "unsigned \fBgather\fP (const char *suffix, Name **array, unsigned size)"
.br
.RI "\fIFetch list of relational scripts.\fP"
.ti -1c
.RI "std::istream * \fBgetSource\fP (void)"
.br
.RI "\fIUsed by embedded interpreters to fetch script from the current source file.\fP"
.in -1c
.SS "Protected Methods"

.in +1c
.ti -1c
.RI "char * \fBgetToken\fP (void)"
.br
.ti -1c
.RI "Method \fBgetHandler\fP (const char *keyword)"
.br
.RI "\fIGet the interpreter method pointer for a given keyword.\fP"
.ti -1c
.RI "\fBScriptImage\fP (\fBScriptCommand\fP *cmdset)"
.br
.RI "\fIConstruct a new working image.\fP"
.ti -1c
.RI "void \fBpurge\fP (void)"
.br
.RI "\fIPurge and reload the script image workspace.\fP"
.ti -1c
.RI "Name * \fBinclude\fP (const char *scrfile)"
.br
.RI "\fIA method to invoke the script compiler to include a script only if it has not been included already.\fP"
.ti -1c
.RI "int \fBcompile\fP (const char *scrfile)"
.br
.RI "\fIThe script compiler itself.\fP"
.ti -1c
.RI "int \fBcompile\fP (const char *scrfile, char *name)"
.br
.RI "\fICompile a script from disk and give it a different internal 'name' as passed.\fP"
.ti -1c
.RI "int \fBcompile\fP (std::istream *str, char *name, const char *scrname=NULL)"
.br
.RI "\fICompile an open stream object into a script.\fP"
.ti -1c
.RI "void \fBcommit\fP (void)"
.br
.RI "\fIUsed in the derived constructor to 'commit' the current image for new processes.\fP"
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "std::ifstream \fBscrSource\fP"
.br
.ti -1c
.RI "std::istream * \fBscrStream\fP"
.br
.ti -1c
.RI "\fBScriptCommand\fP * \fBcmds\fP"
.br
.ti -1c
.RI "int \fBrefcount\fP"
.br
.ti -1c
.RI "Name * \fBindex\fP [37]"
.br
.ti -1c
.RI "char \fBbuffer\fP [512]"
.br
.ti -1c
.RI "char * \fBbp\fP"
.br
.ti -1c
.RI "bool \fBquote\fP"
.br
.ti -1c
.RI "Mutex \fBduplock\fP"
.br
.in -1c
.SS "Friends"

.in +1c
.ti -1c
.RI "class \fBScriptInterp\fP"
.br
.ti -1c
.RI "class \fBScriptModule\fP"
.br
.in -1c
.SH "DETAILED DESCRIPTION"
.PP 
A derivable class to hold compiled script images for active processes. Script compiler image set.
.PP
This includes the script image compiler itself. Typically, a script is compiled one file at a time from a directory, and the committed, during the constructor in a derived class.
.PP
\fBAuthor: \fP
.in +1c
David Sugar <dyfet@ostel.com>. 
.PP
.SH "CONSTRUCTOR & DESTRUCTOR DOCUMENTATION"
.PP 
.SS "ScriptImage::ScriptImage (\fBScriptCommand\fP * cmdset)\fC [protected]\fP"
.PP
Construct a new working image.
.PP
This must be derived to an application specific compiler that can scan directories and invoke the compiler as needed.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIcmdset\fP\fP
of keyword table object used. 
.SH "MEMBER FUNCTION DOCUMENTATION"
.PP 
.SS "void ScriptImage::commit (void)\fC [protected]\fP"
.PP
Used in the derived constructor to 'commit' the current image for new processes.
.PP
This is usually the last statement in the derived constructor. 
.SS "int ScriptImage::compile (std::istream * str, char * name, const char * scrname = NULL)\fC [protected]\fP"
.PP
Compile an open stream object into a script.
.PP
\fBReturns: \fP
.in +1c
lines of script compiled. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIstream\fP\fP
object to use. 
.TP
\fB\fIname\fP\fP
of script save under. 
.SS "int ScriptImage::compile (const char * scrfile, char * name)\fC [protected]\fP"
.PP
Compile a script from disk and give it a different internal 'name' as passed.
.PP
\fBReturns: \fP
.in +1c
lines of script compiled. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
of script file to compile. 
.TP
\fB\fIname\fP\fP
of script to save under. 
.TP
\fB\fItest\fP\fP
if script already loaded. 
.SS "int ScriptImage::compile (const char * scrfile)\fC [protected]\fP"
.PP
The script compiler itself.
.PP
This linearly compiles a Bayonne script file that is specified. Normally used along with a dir scanner in the constructor.
.PP
\fBReturns: \fP
.in +1c
lines of script compiled. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
of script file to compile. 
.SS "virtual Name* ScriptImage::dupScript (const char * name, const char * target)\fC [virtual]\fP"
.PP
Duplicate script if needed.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIscript\fP\fP
name to dup. 
.TP
\fB\fItarget\fP\fP
name to dup as. 
.PP
\fBReturns: \fP
.in +1c
script or NULL. 
.SS "unsigned ScriptImage::gather (const char * suffix, Name ** array, unsigned size)"
.PP
Fetch list of relational scripts.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIsuffix.\fP\fP
.TP
\fB\fIindex.\fP\fP
.TP
\fB\fImax\fP\fP
entries. 
.PP
\fBReturns: \fP
.in +1c
count of entries found. 
.SS "Method ScriptImage::getHandler (const char * keyword)\fC [inline, protected]\fP"
.PP
Get the interpreter method pointer for a given keyword.
.PP
\fBReturns: \fP
.in +1c
method handler. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIkeyword\fP\fP
to search. 
.SS "virtual Name* ScriptImage::getScript (const char * name)\fC [virtual]\fP"
.PP
Fetch named script.
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIscript\fP\fP
name to find. 
.PP
\fBReturns: \fP
.in +1c
script or NULL. 
.SS "std::istream* ScriptImage::getSource (void)\fC [inline]\fP"
.PP
Used by embedded interpreters to fetch script from the current source file.
.PP
\fBReturns: \fP
.in +1c
reference to source file stream. 
.SS "Name* ScriptImage::include (const char * scrfile)\fC [protected]\fP"
.PP
A method to invoke the script compiler to include a script only if it has not been included already.
.PP
\fBReturns: \fP
.in +1c
named script object. 
.PP
Parameters: \fP
.in +1c
.TP
\fB\fIname\fP\fP
of script file to compile. 

.SH "AUTHOR"
.PP 
Generated automatically by Doxygen for ccScript from the source code.
